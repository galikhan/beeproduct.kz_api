/*
 * This file is generated by jOOQ.
 */
package kz.beeproduct.model.tables;


import java.util.Arrays;
import java.util.List;

import kz.beeproduct.model.Keys;
import kz.beeproduct.model.Public;
import kz.beeproduct.model.tables.records.TgUserRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TgUser extends TableImpl<TgUserRecord> {

    private static final long serialVersionUID = -392663290;

    /**
     * The reference instance of <code>public.tg_user</code>
     */
    public static final TgUser TG_USER = new TgUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TgUserRecord> getRecordType() {
        return TgUserRecord.class;
    }

    /**
     * The column <code>public.tg_user.id_</code>.
     */
    public final TableField<TgUserRecord, Long> ID_ = createField(DSL.name("id_"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tg_user.chat_id_</code>.
     */
    public final TableField<TgUserRecord, Integer> CHAT_ID_ = createField(DSL.name("chat_id_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tg_user.username_</code>.
     */
    public final TableField<TgUserRecord, String> USERNAME_ = createField(DSL.name("username_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tg_user.first_name_</code>.
     */
    public final TableField<TgUserRecord, String> FIRST_NAME_ = createField(DSL.name("first_name_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.tg_user.role_</code>.
     */
    public final TableField<TgUserRecord, String> ROLE_ = createField(DSL.name("role_"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>public.tg_user</code> table reference
     */
    public TgUser() {
        this(DSL.name("tg_user"), null);
    }

    /**
     * Create an aliased <code>public.tg_user</code> table reference
     */
    public TgUser(String alias) {
        this(DSL.name(alias), TG_USER);
    }

    /**
     * Create an aliased <code>public.tg_user</code> table reference
     */
    public TgUser(Name alias) {
        this(alias, TG_USER);
    }

    private TgUser(Name alias, Table<TgUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TgUser(Name alias, Table<TgUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TgUser(Table<O> child, ForeignKey<O, TgUserRecord> key) {
        super(child, key, TG_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TgUserRecord> getPrimaryKey() {
        return Keys.TG_USER_PKEY;
    }

    @Override
    public List<UniqueKey<TgUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TgUserRecord>>asList(Keys.TG_USER_PKEY, Keys.TG_USER_CHAT_ID__KEY);
    }

    @Override
    public TgUser as(String alias) {
        return new TgUser(DSL.name(alias), this);
    }

    @Override
    public TgUser as(Name alias) {
        return new TgUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TgUser rename(String name) {
        return new TgUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TgUser rename(Name name) {
        return new TgUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
