/*
 * This file is generated by jOOQ.
 */
package kz.beeproduct.model.tables;


import java.util.Arrays;
import java.util.List;

import kz.beeproduct.model.Keys;
import kz.beeproduct.model.Public;
import kz.beeproduct.model.tables.records.UsersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = -1475156179;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>public.users.login_</code>.
     */
    public final TableField<UsersRecord, String> LOGIN_ = createField(DSL.name("login_"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users.password_</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD_ = createField(DSL.name("password_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users.entrance_</code>.
     */
    public final TableField<UsersRecord, Integer> ENTRANCE_ = createField(DSL.name("entrance_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.users.floor_</code>.
     */
    public final TableField<UsersRecord, Integer> FLOOR_ = createField(DSL.name("floor_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.users.flat_</code>.
     */
    public final TableField<UsersRecord, Integer> FLAT_ = createField(DSL.name("flat_"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.users.session_</code>.
     */
    public final TableField<UsersRecord, String> SESSION_ = createField(DSL.name("session_"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users.address_</code>.
     */
    public final TableField<UsersRecord, String> ADDRESS_ = createField(DSL.name("address_"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.phone_</code>.
     */
    public final TableField<UsersRecord, String> PHONE_ = createField(DSL.name("phone_"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * Create a <code>public.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.USERS_PKEY, Keys.USERS_SESSION__KEY);
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, Integer, Integer, Integer, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
