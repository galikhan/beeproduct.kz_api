/*
 * This file is generated by jOOQ.
 */
package kz.beeproduct.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import kz.beeproduct.model.Keys;
import kz.beeproduct.model.Public;
import kz.beeproduct.model.tables.records.FileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class File extends TableImpl<FileRecord> {

    private static final long serialVersionUID = 1556507383;

    /**
     * The reference instance of <code>public.file</code>
     */
    public static final File FILE = new File();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileRecord> getRecordType() {
        return FileRecord.class;
    }

    /**
     * The column <code>public.file.id_</code>.
     */
    public final TableField<FileRecord, Long> ID_ = createField(DSL.name("id_"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.file.container_</code>.
     */
    public final TableField<FileRecord, Long> CONTAINER_ = createField(DSL.name("container_"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.file.filename_</code>.
     */
    public final TableField<FileRecord, String> FILENAME_ = createField(DSL.name("filename_"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.file.filepath_</code>.
     */
    public final TableField<FileRecord, String> FILEPATH_ = createField(DSL.name("filepath_"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.file.removed_</code>.
     */
    public final TableField<FileRecord, Boolean> REMOVED_ = createField(DSL.name("removed_"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.file.modified_</code>.
     */
    public final TableField<FileRecord, LocalDateTime> MODIFIED_ = createField(DSL.name("modified_"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.file.created_</code>.
     */
    public final TableField<FileRecord, LocalDateTime> CREATED_ = createField(DSL.name("created_"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>public.file</code> table reference
     */
    public File() {
        this(DSL.name("file"), null);
    }

    /**
     * Create an aliased <code>public.file</code> table reference
     */
    public File(String alias) {
        this(DSL.name(alias), FILE);
    }

    /**
     * Create an aliased <code>public.file</code> table reference
     */
    public File(Name alias) {
        this(alias, FILE);
    }

    private File(Name alias, Table<FileRecord> aliased) {
        this(alias, aliased, null);
    }

    private File(Name alias, Table<FileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> File(Table<O> child, ForeignKey<O, FileRecord> key) {
        super(child, key, FILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FileRecord> getPrimaryKey() {
        return Keys.FILE_PKEY;
    }

    @Override
    public List<UniqueKey<FileRecord>> getKeys() {
        return Arrays.<UniqueKey<FileRecord>>asList(Keys.FILE_PKEY);
    }

    @Override
    public File as(String alias) {
        return new File(DSL.name(alias), this);
    }

    @Override
    public File as(Name alias) {
        return new File(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(String name) {
        return new File(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public File rename(Name name) {
        return new File(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
